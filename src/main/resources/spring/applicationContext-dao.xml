<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<!-- 数据库连接池 -->
	<!-- 加载配置文件 -->
	<!-- <context:property-placeholder location="classpath:conf/db.properties" /> -->
	<!-- 数据库连接池 -->
	<!-- <bean id="dataSource"  class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClass" value="${jdbc.driver}" />
	</bean> -->
	<context:property-placeholder location="classpath:conf/db.properties" />
	<!-- Hikari Datasource 连接池配置-->  
	<!--<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"  destroy-method="shutdown">  -->
		<!--<property name="driverClassName" value="${jdbc.driver}" /> &lt;!&ndash; 无需指定，除非系统无法自动识别 &ndash;&gt;  -->
		<!--<property name="jdbcUrl" value="jdbc:mysql://118.190.209.162:3306/express?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true" />-->
		<!--<property name="username" value="${jdbc.username}" />  -->
		<!--<property name="password" value="${jdbc.password}" />  -->
		 <!--&lt;!&ndash; 连接只读数据库时配置为true， 保证安全 &ndash;&gt;  -->
		<!--<property name="readOnly" value="false" />  -->
		<!--&lt;!&ndash; 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 &ndash;&gt;  -->
		<!--<property name="connectionTimeout" value="30000" />  -->
		<!--&lt;!&ndash; 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 &ndash;&gt;  -->
		<!--<property name="idleTimeout" value="600000" />  -->
		<!--&lt;!&ndash; 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） &ndash;&gt;  -->
		<!--<property name="maxLifetime" value="1800000" />  -->
		<!--&lt;!&ndash; 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) &ndash;&gt;  -->
		<!--<property name="maximumPoolSize" value="10	" />-->
	<!--</bean>-->
	<!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
		<!--<property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
		<!--<property name="url" value="jdbc:mysql://118.190.209.162:3306/express?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true"/>-->
		<!--<property name="username" value="${db.username}"/>-->
		<!--<property name="password" value="${db.password}"/>-->
		<!--&lt;!&ndash; 连接池启动时的初始值 &ndash;&gt;-->
		<!--<property name="initialSize" value="${db.initialSize}"/>-->
		<!--&lt;!&ndash; 连接池的最大值 &ndash;&gt;-->
		<!--<property name="maxActive" value="${db.maxActive}"/>-->
		<!--&lt;!&ndash; 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 &ndash;&gt;-->
		<!--<property name="maxIdle" value="${db.maxIdle}"/>-->
		<!--&lt;!&ndash; 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 &ndash;&gt;-->
		<!--<property name="minIdle" value="${db.minIdle}"/>-->
		<!--&lt;!&ndash; 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 &ndash;&gt;-->
		<!--<property name="maxWait" value="${db.maxWait}"/>-->
		<!--&lt;!&ndash;#给出一条简单的sql语句进行验证 &ndash;&gt;-->
		<!--&lt;!&ndash;<property name="validationQuery" value="select getdate()" />&ndash;&gt;-->
		<!--<property name="defaultAutoCommit" value="${db.defaultAutoCommit}"/>-->
		<!--&lt;!&ndash; 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 &ndash;&gt;-->
		<!--&lt;!&ndash;<property name="removeAbandoned" value="true" />&ndash;&gt;-->
		<!--&lt;!&ndash; 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 &ndash;&gt;-->
		<!--&lt;!&ndash;<property name="removeAbandonedTimeout" value="120" />&ndash;&gt;-->
		<!--&lt;!&ndash; #连接的超时时间，默认为半小时。 &ndash;&gt;-->
		<!--<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>-->

		<!--&lt;!&ndash;# 失效检查线程运行时间间隔，要小于MySQL默认&ndash;&gt;-->
		<!--<property name="timeBetweenEvictionRunsMillis" value="40000"/>-->
		<!--&lt;!&ndash;# 检查连接是否有效&ndash;&gt;-->
		<!--<property name="testWhileIdle" value="true"/>-->
		<!--&lt;!&ndash;# 检查连接有效性的SQL语句&ndash;&gt;-->
		<!--<property name="validationQuery" value="SELECT 1 FROM dual"/>-->
	<!--</bean>-->
	<!-- Hikari Datasource end-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="jdbc:mysql://118.190.209.162:3306/express?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="initialSize" value="1" /><!-- 配置初始化连接池数量-->
		<property name="minIdle" value="1" /><!-- 配置最小连接池数量-->
		<property name="maxActive" value="20" /><!-- 配置最大连接池数量-->
		<property name="maxWait" value="60000" /><!-- 配置获取连接等待超时的时间 单位毫秒-->
		<property name="useUnfairLock" value="true"/><!--使用非公平锁-->
		<property name="timeBetweenEvictionRunsMillis" value="60000" /><!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" /><!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="validationQuery" value="SELECT 'x'" /><!--用来检测连接是否有效的sql，要求是一个查询语句。-->
		<property name="testWhileIdle" value="true" /><!--申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
		<property name="testOnBorrow" value="false" /><!--申请连接时执行validationQuery检测连接是否有效，-->
		<property name="testOnReturn" value="false" /><!--归还连接时执行validationQuery检测连接是否有效，-->
		<property name="poolPreparedStatements" value="true" /><!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="maxOpenPreparedStatements" value="20" />
		<property name="filters" value="stat" /><!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
	</bean>


	<!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml" />
		<property name="mapperLocations" value="classpath:com/logistics/express/mapper/*.xml"/>
		<property name="typeAliasesPackage" value="com.logistics.express.entity"/>
		<property name="plugins">
		  <array>
		    <bean class="com.github.pagehelper.PageHelper">
		      <property name="properties">
		        <value>
		          dialect=mysql
		        </value>
		      </property>
		    </bean>
		  </array>
		</property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.logistics.express.dao" />
	</bean>
</beans>